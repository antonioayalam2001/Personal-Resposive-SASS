$grid-columns: 12;
$grid-gaps: (
    "0": 0,
    "1": 10px,
    "2": 20px,
    "3": 30px,
);
$layout-values: flex-start, flex-end, center, space-between, space-around;

//base layour classes 
.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    box-sizing: border-box;
}


// When using column classes they must be inside this class
/*
    div class row
        div class col

*/
.row {
    display: flex;
    flex-flow: row wrap;
}

// grid gaps
@each $key, $val in $grid-gaps {
    .gap-#{$key} > * {
      padding: $val;
    }
    .gap-#{$key} {
      margin-left: -$val;
      margin-right: -$val;
    }
  }


@include breakpoint {

    // WE ARE TRYING TO ACHIEVE THIS:
    //  .col-xs-1 .col-xs-2 .col-xs-3
    @for $i from 1 through $grid-columns {
        .col-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}


// justify content classes
@each $val in $layout-values {
    .justify-#{$val} {
      justify-content: $val;
    }
  }

// COL CLASSES
@include xs {
    // WE ARE TRYING TO ACHIEVE THIS:
    //  .col-xs-1 .col-xs-2 .col-xs-3
    @for $i from 1 through $grid-columns {
        .col-xs-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include ss {

    // WE ARE TRYING TO ACHIEVE THIS:
    //  .col-xs-1 .col-xs-2 .col-xs-3
    @for $i from 1 through $grid-columns {
        .col-ss-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include sm {

    // WE ARE TRYING TO ACHIEVE THIS:
    //  .col-xs-1 .col-xs-2 .col-xs-3
    @for $i from 1 through $grid-columns {
        .col-sm-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include md {

    // WE ARE TRYING TO ACHIEVE THIS:
    //  .col-xs-1 .col-xs-2 .col-xs-3
    @for $i from 1 through $grid-columns {
        .col-md-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include lg {

    // WE ARE TRYING TO ACHIEVE THIS:
    //  .col-xs-1 .col-xs-2 .col-xs-3
    @for $i from 1 through $grid-columns {
        .col-lg-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include xl {

    // WE ARE TRYING TO ACHIEVE THIS:
    //  .col-xs-1 .col-xs-2 .col-xs-3
    @for $i from 1 through $grid-columns {
        .col-xl-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

